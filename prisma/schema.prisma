// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  role          String         // Mantenemos la columna role existente
  roleId        String?        // Hacemos opcional el roleId
  roleRelation  Role?          @relation(fields: [roleId], references: [id])
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sales         Sale[]
  refreshTokens RefreshToken[]
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  sku         String      @unique
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  supplierId  String?
  supplier    Supplier?   @relation(fields: [supplierId], references: [id])
  items       SaleItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Sale {
  id          String     @id @default(uuid())
  date        DateTime   @default(now())
  total       Float
  subtotal    Float      // Total before discounts
  discount    Float      @default(0)
  userId      String
  customerId  String
  discountId  String?    // Optional discount applied
  promotionId String?    // Optional promotion applied
  user        User       @relation(fields: [userId], references: [id])
  customer    Customer   @relation(fields: [customerId], references: [id])
  items       SaleItem[]
  discountRelation Discount?  @relation(fields: [discountId], references: [id])
  promotion   Promotion? @relation(fields: [promotionId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) // Agregamos valor por defecto
}

model Supplier {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  phone       String?
  address     String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Customer {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  phone       String?
  address     String?
  sales       Sale[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Notification {
  id          String    @id @default(uuid())
  type        String    // 'STOCK_LOW', 'SALE', 'SYSTEM', etc.
  message     String
  isRead      Boolean   @default(false)
  userId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Discount model
model Discount {
  id          String   @id @default(uuid())
  code        String   @unique
  type        String   // PERCENTAGE or FIXED_AMOUNT
  value       Float    // Percentage or fixed amount
  minPurchase Float?   // Minimum purchase amount to apply discount
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  maxUses     Int?     // Maximum number of times the discount can be used
  usedCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sales       Sale[]   // Sales where this discount was applied
}

// Promotion model
model Promotion {
  id          String   @id @default(uuid())
  name        String
  description String
  type        String   // BUY_X_GET_Y, BUNDLE, FLAT_RATE
  conditions  Json     // Conditions for the promotion (e.g., buy 2 get 1 free)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sales       Sale[]   // Sales where this promotion was applied
} 